import socket
import rsa
import time


def start_server(private_key):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(("0.0.0.0", 6000))
    server_socket.listen(1)

    print(f"Server listening on 0.0.0.0:6000")
    
    client_socket, client_address = server_socket.accept()
    print(f"Accepted connection from {client_address[0]}:{client_address[1]}")

    aes_key = None
    aes_iv = None
    operation = None
    while True:
        request = client_socket.recv(2048)
        print(len(request))
        request = rsa.decrypt(request, private_key)       

        if operation is None:
            request = request.decode("utf-8") 
            print(f"Operation: {request}")
            operation = request
            
            if operation == "retrieve":
                #time.sleep(2)
                client_socket.send(aes_key)
                #time.sleep(1)
                client_socket.send(aes_iv)
                print("data sent")
                print(str(len(aes_key)))
                print(str(len(aes_iv)))

                
                break
                        
        elif operation == "store":
            if aes_key is None:
                aes_key = request
                print("key store length: " + str(len(aes_key)))
            else:
                aes_iv = request
                operation = None
                print("iv store")
   
    # Clean up the connection
    client_socket.close()
    server_socket.close()
    

if __name__ == "__main__":
    with open(".\\RSA_KEYS\\TestPrivateKey_SERVER", "rb") as file:
        byte = file.read()
    
    private_key = rsa.PrivateKey.load_pkcs1(byte, "DER")
    
    with open(".\\RSA_KEYS\\TestPublicKey_CLIENT", "rb") as file:
        byte = file.read()
        
    public_key = rsa.PublicKey.load_pkcs1(byte, "DER")
    start_server(private_key)
    
  
  
    